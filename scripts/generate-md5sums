#!/usr/bin/python
import os,sys
import os.path
#from md5 import md5
from hashlib import md5
from xattr import xattr
from optparse import OptionParser

# you may want to set these variables
BLOCK_SIZE = 1024
attribute_name = 'user.md5sum'
MD5SUMS_FILENAME = 'md5sums.txt'

# there is no use for the option parser now
parser = OptionParser()

parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                  default=False)


opts, args = parser.parse_args(sys.argv[1:])

def md5sum(afile):
    """returns the standard md5sum hexdigest
    for a file object"""
    m = md5()
    block = afile.read(BLOCK_SIZE)
    while block:
        m.update(block)
        block = afile.read(BLOCK_SIZE)
    return m.hexdigest()

def append_md5sum(mainfile, filename, md5digest):
    mainfile.write('%s  %s\n' % (md5digest, filename))

def is_writable(filename):
    return os.access(filename, os.W_OK)

# quick test to see if the file is proper for generating
# md5sum for it
def check_file_proper(filename):
    link = os.path.islink(filename)
    writable = os.access(filename, os.W_OK)
    isfile = os.path.isfile(filename)
    if not isfile and opts.verbose:
        print filename, "isn't a file"
    if not writable and opts.verbose:
        print filename, 'is read-only'
    return not link and writable and isfile

if len(args) == 0:
    top = '.'
else:
    print "can't handle arguments right now"
    sys.exit(1)
    
main_md5sums_filename = os.path.join(top, MD5SUMS_FILENAME)
main_md5sums = file(main_md5sums_filename, 'w')

for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        filename = os.path.join(root, name)
        if filename != main_md5sums_filename:
            if check_file_proper(filename):
                xf = xattr(filename)
                if xf.has_key(attribute_name):
                    md = xf.get(attribute_name)
                else:
                    if opts.verbose:
                        print "setting md5sum for", filename
                    md = md5sum(file(filename))
                    xf.set(attribute_name, md)
                append_md5sum(main_md5sums, filename, md)
            elif not is_writable(filename):
                print "%s is read-only" % filename
                xf = xattr(filename)
                if xf.has_key(attribute_name):
                    print "%s is already set for %s" % (attribute_name, filename)
                else:
                    md = md5sum(file(filename))
                    oldmode = os.stat(filename).st_mode
                    os.chmod(filename, 0600)
                    xf.set(attribute_name, md)
                    os.chmod(filename, oldmode)
                md = xf.get(attribute_name)
                append_md5sum(main_md5sums, filename, md)
                
                    
main_md5sums.close()
